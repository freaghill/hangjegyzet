version: '3.8'

services:
  # Next.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@db:5432/hangjegyzet
      - REDIS_URL=redis://redis:6379
      - MEILISEARCH_HOST=http://meilisearch:7700
      - MEILISEARCH_API_KEY=${MEILISEARCH_MASTER_KEY}
    depends_on:
      - db
      - redis
      - meilisearch
    volumes:
      - ./uploads:/app/uploads
      - ./public:/app/public
    networks:
      - hangjegyzet

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=hangjegyzet
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - hangjegyzet

  # Redis for Queues & Caching
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - hangjegyzet

  # Meilisearch for Full-text Search
  meilisearch:
    image: getmeili/meilisearch:v1.5
    restart: unless-stopped
    environment:
      - MEILI_MASTER_KEY=${MEILISEARCH_MASTER_KEY}
      - MEILI_ENV=production
    volumes:
      - meilisearch_data:/meili_data
    ports:
      - "7700:7700"
    networks:
      - hangjegyzet

  # BullMQ Worker for Background Jobs
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@db:5432/hangjegyzet
      - REDIS_URL=redis://redis:6379
      - DEEPGRAM_API_KEY=${DEEPGRAM_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - db
      - redis
    volumes:
      - ./uploads:/app/uploads
    networks:
      - hangjegyzet

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl
      - ./uploads:/var/www/uploads
    depends_on:
      - app
    networks:
      - hangjegyzet

  # Backup Service
  backup:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      - PGPASSWORD=${DB_PASSWORD}
    volumes:
      - ./backups:/backups
    command: >
      sh -c "while true; do
        pg_dump -h db -U postgres hangjegyzet > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql
        find /backups -name 'backup_*.sql' -mtime +7 -delete
        sleep 86400
      done"
    depends_on:
      - db
    networks:
      - hangjegyzet

volumes:
  postgres_data:
  redis_data:
  meilisearch_data:

networks:
  hangjegyzet:
    driver: bridge