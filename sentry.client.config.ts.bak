import * as Sentry from '@sentry/nextjs'

const SENTRY_DSN = process.env.NEXT_PUBLIC_SENTRY_DSN

Sentry.init({
  dsn: SENTRY_DSN,
  
  // Performance Monitoring
  tracesSampleRate: process.env.NODE_ENV === 'production' ? 0.1 : 1.0,
  
  // Session Replay
  replaysSessionSampleRate: 0.1,
  replaysOnErrorSampleRate: 1.0,
  
  // Release tracking
  release: process.env.NEXT_PUBLIC_APP_VERSION || '1.0.0',
  environment: process.env.NODE_ENV,
  
  // Integrations
  integrations: [
    Sentry.replayIntegration({
      maskAllText: false,
      blockAllMedia: false,
      maskAllInputs: true,
      maskTextContent: false,
    }),
    Sentry.browserTracingIntegration(),
  ],
  
  // Filtering
  ignoreErrors: [
    // Browser extensions
    'top.GLOBALS',
    'ResizeObserver loop limit exceeded',
    'Non-Error promise rejection captured',
    // React errors
    'ResizeObserver loop completed with undelivered notifications',
    // Network errors
    'NetworkError',
    'Failed to fetch',
  ],
  
  denyUrls: [
    // Chrome extensions
    /extensions\//i,
    /^chrome:\/\//i,
    /^chrome-extension:\/\//i,
  ],
  
  // Hooks
  beforeSend(event, hint) {
    // Add user context
    if (typeof window !== 'undefined') {
      const user = window.localStorage.getItem('supabase.auth.token')
      if (user) {
        try {
          const userData = JSON.parse(user)
          event.user = {
            id: userData.user?.id,
            email: userData.user?.email,
          }
        } catch (e) {
          // Invalid user data
        }
      }
    }
    
    // Filter out non-error events in development
    if (process.env.NODE_ENV === 'development' && !hint.originalException) {
      return null
    }
    
    return event
  },
  
  // Custom error boundary
  errorBoundaryOptions: {
    showDialog: false,
    fallback: ({ error, resetError }) => (
      <div>Something went wrong. Please try again.</div>
    ),
  },
})